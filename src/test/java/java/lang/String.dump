
class name: java/lang/String
minor version: 0
major version: 52
flags: 0x31
this class: java/lang/String
super class: java/lang/Object


constant pool:
#1 = Methodref: java/lang/Object.<init>:()V
#2 = String: ""
#3 = Fieldref: java/lang/String.value:[C
#4 = Fieldref: java/lang/String.hash:I
#5 = Methodref: java/util/Arrays.copyOf:([CI)[C
#6 = Class: java/lang/StringIndexOutOfBoundsException
#7 = Methodref: java/lang/StringIndexOutOfBoundsException.<init>:(I)V
#8 = Methodref: java/util/Arrays.copyOfRange:([CII)[C
#9 = Methodref: java/lang/Character.isBmpCodePoint:(I)Z
#10 = Methodref: java/lang/Character.isValidCodePoint:(I)Z
#11 = Class: java/lang/IllegalArgumentException
#12 = Methodref: java/lang/Integer.toString:(I)Ljava/lang/String;
#13 = Methodref: java/lang/IllegalArgumentException.<init>:(Ljava/lang/String;)V
#14 = Methodref: java/lang/Character.toSurrogates:(I[CI)V
#15 = Methodref: java/lang/String.checkBounds:([BII)V
#16 = Methodref: java/lang/String.<init>:([BIII)V
#17 = Class: java/lang/NullPointerException
#18 = String: "charsetName"
#19 = Methodref: java/lang/NullPointerException.<init>:(Ljava/lang/String;)V
#20 = Methodref: java/lang/StringCoding.decode:(Ljava/lang/String;[BII)[C
#21 = String: "charset"
#22 = Methodref: java/lang/StringCoding.decode:(Ljava/nio/charset/Charset;[BII)[C
#23 = Methodref: java/lang/String.<init>:([BIILjava/lang/String;)V
#24 = Methodref: java/lang/String.<init>:([BIILjava/nio/charset/Charset;)V
#25 = Methodref: java/lang/StringCoding.decode:([BII)[C
#26 = Methodref: java/lang/String.<init>:([BII)V
#27 = Methodref: java/lang/StringBuffer.getValue:()[C
#28 = Methodref: java/lang/StringBuffer.length:()I
#29 = Methodref: java/lang/StringBuilder.getValue:()[C
#30 = Methodref: java/lang/StringBuilder.length:()I
#31 = Methodref: java/lang/Character.codePointAtImpl:([CII)I
#32 = Methodref: java/lang/Character.codePointBeforeImpl:([CII)I
#33 = Class: java/lang/IndexOutOfBoundsException
#34 = Methodref: java/lang/IndexOutOfBoundsException.<init>:()V
#35 = Methodref: java/lang/Character.codePointCountImpl:([CII)I
#36 = Methodref: java/lang/Character.offsetByCodePointsImpl:([CIIII)I
#37 = Methodref: java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
#38 = Methodref: java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
#39 = Methodref: java/lang/NullPointerException.<init>:()V
#40 = Methodref: java/lang/StringCoding.encode:(Ljava/lang/String;[CII)[B
#41 = Methodref: java/lang/StringCoding.encode:(Ljava/nio/charset/Charset;[CII)[B
#42 = Methodref: java/lang/StringCoding.encode:([CII)[B
#43 = Class: java/lang/String
#44 = Methodref: java/lang/String.contentEquals:(Ljava/lang/CharSequence;)Z
#45 = Methodref: java/lang/AbstractStringBuilder.getValue:()[C
#46 = Methodref: java/lang/AbstractStringBuilder.length:()I
#47 = Class: java/lang/AbstractStringBuilder
#48 = Class: java/lang/StringBuffer
#49 = Methodref: java/lang/String.nonSyncContentEquals:(Ljava/lang/AbstractStringBuilder;)Z
#50 = Methodref: java/lang/String.equals:(Ljava/lang/Object;)Z
#51 = InterfaceMethodref: java/lang/CharSequence.length:()I
#52 = InterfaceMethodref: java/lang/CharSequence.charAt:(I)C
#53 = Methodref: java/lang/String.regionMatches:(ZILjava/lang/String;II)Z
#54 = Methodref: java/lang/Math.min:(II)I
#55 = Fieldref: java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;
#56 = InterfaceMethodref: java/util/Comparator.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
#57 = Methodref: java/lang/Character.toUpperCase:(C)C
#58 = Methodref: java/lang/Character.toLowerCase:(C)C
#59 = Methodref: java/lang/String.startsWith:(Ljava/lang/String;I)Z
#60 = Methodref: java/lang/String.indexOf:(II)I
#61 = Class: java/lang/Character
#62 = Integer: 65536
#63 = Methodref: java/lang/String.indexOfSupplementary:(II)I
#64 = Methodref: java/lang/Character.highSurrogate:(I)C
#65 = Methodref: java/lang/Character.lowSurrogate:(I)C
#66 = Methodref: java/lang/String.lastIndexOf:(II)I
#67 = Methodref: java/lang/String.lastIndexOfSupplementary:(II)I
#68 = Methodref: java/lang/String.indexOf:(Ljava/lang/String;I)I
#69 = Methodref: java/lang/String.indexOf:([CII[CIII)I
#70 = Methodref: java/lang/String.lastIndexOf:(Ljava/lang/String;I)I
#71 = Methodref: java/lang/String.lastIndexOf:([CII[CIII)I
#72 = Methodref: java/lang/String.<init>:([CII)V
#73 = Methodref: java/lang/String.substring:(II)Ljava/lang/String;
#74 = Methodref: java/lang/String.length:()I
#75 = Methodref: java/lang/String.getChars:([CI)V
#76 = Methodref: java/lang/String.<init>:([CZ)V
#77 = Methodref: java/util/regex/Pattern.matches:(Ljava/lang/String;Ljava/lang/CharSequence;)Z
#78 = InterfaceMethodref: java/lang/CharSequence.toString:()Ljava/lang/String;
#79 = Methodref: java/lang/String.indexOf:(Ljava/lang/String;)I
#80 = Methodref: java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
#81 = Methodref: java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
#82 = Methodref: java/util/regex/Matcher.replaceFirst:(Ljava/lang/String;)Ljava/lang/String;
#83 = Methodref: java/util/regex/Matcher.replaceAll:(Ljava/lang/String;)Ljava/lang/String;
#84 = Class: java/util/regex/Pattern
#85 = Methodref: java/util/regex/Pattern.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;
#86 = Methodref: java/util/regex/Matcher.quoteReplacement:(Ljava/lang/String;)Ljava/lang/String;
#87 = String: ".$|()[{^?*+\\"
#88 = Methodref: java/lang/String.charAt:(I)C
#89 = Methodref: java/lang/String.indexOf:(I)I
#90 = Integer: 55296
#91 = Integer: 57343
#92 = Class: java/util/ArrayList
#93 = Methodref: java/util/ArrayList.<init>:()V
#94 = Methodref: java/util/ArrayList.size:()I
#95 = Methodref: java/util/ArrayList.add:(Ljava/lang/Object;)Z
#96 = Methodref: java/util/ArrayList.get:(I)Ljava/lang/Object;
#97 = Methodref: java/util/ArrayList.subList:(II)Ljava/util/List;
#98 = InterfaceMethodref: java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
#99 = Class: [Ljava/lang/String;
#100 = Methodref: java/util/regex/Pattern.split:(Ljava/lang/CharSequence;I)[Ljava/lang/String;
#101 = Methodref: java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
#102 = Class: java/util/StringJoiner
#103 = Methodref: java/util/StringJoiner.<init>:(Ljava/lang/CharSequence;)V
#104 = Methodref: java/util/StringJoiner.add:(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;
#105 = Methodref: java/util/StringJoiner.toString:()Ljava/lang/String;
#106 = InterfaceMethodref: java/lang/Iterable.iterator:()Ljava/util/Iterator;
#107 = InterfaceMethodref: java/util/Iterator.hasNext:()Z
#108 = InterfaceMethodref: java/util/Iterator.next:()Ljava/lang/Object;
#109 = Class: java/lang/CharSequence
#110 = Integer: 56319
#111 = Methodref: java/lang/String.codePointAt:(I)I
#112 = Methodref: java/lang/Character.toLowerCase:(I)I
#113 = Methodref: java/lang/Character.charCount:(I)I
#114 = Methodref: java/util/Locale.getLanguage:()Ljava/lang/String;
#115 = String: "tr"
#116 = String: "az"
#117 = String: "lt"
#118 = Methodref: java/lang/ConditionalSpecialCasing.toLowerCaseEx:(Ljava/lang/String;ILjava/util/Locale;)I
#119 = Methodref: java/lang/ConditionalSpecialCasing.toLowerCaseCharArray:(Ljava/lang/String;ILjava/util/Locale;)[C
#120 = Methodref: java/lang/Character.toChars:(I[CI)I
#121 = Methodref: java/lang/Character.toChars:(I)[C
#122 = Methodref: java/util/Locale.getDefault:()Ljava/util/Locale;
#123 = Methodref: java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
#124 = Methodref: java/lang/Character.toUpperCaseEx:(I)I
#125 = Methodref: java/lang/ConditionalSpecialCasing.toUpperCaseEx:(Ljava/lang/String;ILjava/util/Locale;)I
#126 = Methodref: java/lang/ConditionalSpecialCasing.toUpperCaseCharArray:(Ljava/lang/String;ILjava/util/Locale;)[C
#127 = Methodref: java/lang/Character.toUpperCaseCharArray:(I)[C
#128 = Methodref: java/lang/String.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;
#129 = Class: java/util/Formatter
#130 = Methodref: java/util/Formatter.<init>:()V
#131 = Methodref: java/util/Formatter.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;
#132 = Methodref: java/util/Formatter.toString:()Ljava/lang/String;
#133 = Methodref: java/util/Formatter.<init>:(Ljava/util/Locale;)V
#134 = String: "null"
#135 = Methodref: java/lang/Object.toString:()Ljava/lang/String;
#136 = Methodref: java/lang/String.<init>:([C)V
#137 = String: "true"
#138 = String: "false"
#139 = Methodref: java/lang/Long.toString:(J)Ljava/lang/String;
#140 = Methodref: java/lang/Float.toString:(F)Ljava/lang/String;
#141 = Methodref: java/lang/Double.toString:(D)Ljava/lang/String;
#142 = Methodref: java/lang/String.compareTo:(Ljava/lang/String;)I
#143 = Class: java/io/ObjectStreamField
#144 = Fieldref: java/lang/String.serialPersistentFields:[Ljava/io/ObjectStreamField;
#145 = Class: java/lang/String$CaseInsensitiveComparator
#146 = Methodref: java/lang/String$CaseInsensitiveComparator.<init>:(Ljava/lang/String$1;)V
#147 = Class: java/lang/Object
#148 = Class: java/io/Serializable
#149 = Class: java/lang/Comparable
#150 = Class: java/lang/String$1
#151 = Utf8: "InnerClasses"
#152 = Utf8: "CaseInsensitiveComparator"
#153 = Utf8: "value"
#154 = Utf8: "[C"
#155 = Utf8: "hash"
#156 = Utf8: "I"
#157 = Utf8: "serialVersionUID"
#158 = Utf8: "J"
#159 = Utf8: "ConstantValue"
#160 = Long: -6849794470754667710
#162 = Utf8: "serialPersistentFields"
#163 = Utf8: "[Ljava/io/ObjectStreamField;"
#164 = Utf8: "CASE_INSENSITIVE_ORDER"
#165 = Utf8: "Ljava/util/Comparator;"
#166 = Utf8: "Signature"
#167 = Utf8: "Ljava/util/Comparator<Ljava/lang/String;>;"
#168 = Utf8: "<init>"
#169 = Utf8: "()V"
#170 = Utf8: "Code"
#171 = Utf8: "LineNumberTable"
#172 = Utf8: "(Ljava/lang/String;)V"
#173 = Utf8: "([C)V"
#174 = Utf8: "([CII)V"
#175 = Utf8: "StackMapTable"
#176 = Class: java/lang/String
#177 = Class: [C
#178 = Utf8: "([III)V"
#179 = Class: [I
#180 = Utf8: "([BIII)V"
#181 = Class: [B
#182 = Utf8: "Deprecated"
#183 = Utf8: "RuntimeVisibleAnnotations"
#184 = Utf8: "Ljava/lang/Deprecated;"
#185 = Utf8: "([BI)V"
#186 = Utf8: "checkBounds"
#187 = Utf8: "([BII)V"
#188 = Utf8: "([BIILjava/lang/String;)V"
#189 = Utf8: "Exceptions"
#190 = Class: java/io/UnsupportedEncodingException
#191 = Utf8: "([BIILjava/nio/charset/Charset;)V"
#192 = Class: java/nio/charset/Charset
#193 = Utf8: "([BLjava/lang/String;)V"
#194 = Utf8: "([BLjava/nio/charset/Charset;)V"
#195 = Utf8: "([B)V"
#196 = Utf8: "(Ljava/lang/StringBuffer;)V"
#197 = Class: java/lang/StringBuffer
#198 = Class: java/lang/Object
#199 = Class: java/lang/Throwable
#200 = Utf8: "(Ljava/lang/StringBuilder;)V"
#201 = Utf8: "([CZ)V"
#202 = Utf8: "length"
#203 = Utf8: "()I"
#204 = Utf8: "isEmpty"
#205 = Utf8: "()Z"
#206 = Utf8: "charAt"
#207 = Utf8: "(I)C"
#208 = Utf8: "codePointAt"
#209 = Utf8: "(I)I"
#210 = Utf8: "codePointBefore"
#211 = Utf8: "codePointCount"
#212 = Utf8: "(II)I"
#213 = Utf8: "offsetByCodePoints"
#214 = Utf8: "getChars"
#215 = Utf8: "([CI)V"
#216 = Utf8: "(II[CI)V"
#217 = Utf8: "getBytes"
#218 = Utf8: "(II[BI)V"
#219 = Utf8: "(Ljava/lang/String;)[B"
#220 = Utf8: "(Ljava/nio/charset/Charset;)[B"
#221 = Utf8: "()[B"
#222 = Utf8: "equals"
#223 = Utf8: "(Ljava/lang/Object;)Z"
#224 = Utf8: "contentEquals"
#225 = Utf8: "(Ljava/lang/StringBuffer;)Z"
#226 = Utf8: "nonSyncContentEquals"
#227 = Utf8: "(Ljava/lang/AbstractStringBuilder;)Z"
#228 = Utf8: "(Ljava/lang/CharSequence;)Z"
#229 = Class: java/lang/CharSequence
#230 = Utf8: "equalsIgnoreCase"
#231 = Utf8: "(Ljava/lang/String;)Z"
#232 = Utf8: "compareTo"
#233 = Utf8: "(Ljava/lang/String;)I"
#234 = Utf8: "compareToIgnoreCase"
#235 = Utf8: "regionMatches"
#236 = Utf8: "(ILjava/lang/String;II)Z"
#237 = Utf8: "(ZILjava/lang/String;II)Z"
#238 = Utf8: "startsWith"
#239 = Utf8: "(Ljava/lang/String;I)Z"
#240 = Utf8: "endsWith"
#241 = Utf8: "hashCode"
#242 = Utf8: "indexOf"
#243 = Utf8: "indexOfSupplementary"
#244 = Utf8: "lastIndexOf"
#245 = Utf8: "lastIndexOfSupplementary"
#246 = Utf8: "(Ljava/lang/String;I)I"
#247 = Utf8: "([CIILjava/lang/String;I)I"
#248 = Utf8: "([CII[CIII)I"
#249 = Utf8: "substring"
#250 = Utf8: "(I)Ljava/lang/String;"
#251 = Utf8: "(II)Ljava/lang/String;"
#252 = Utf8: "subSequence"
#253 = Utf8: "(II)Ljava/lang/CharSequence;"
#254 = Utf8: "concat"
#255 = Utf8: "(Ljava/lang/String;)Ljava/lang/String;"
#256 = Utf8: "replace"
#257 = Utf8: "(CC)Ljava/lang/String;"
#258 = Utf8: "matches"
#259 = Utf8: "contains"
#260 = Utf8: "replaceFirst"
#261 = Utf8: "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
#262 = Utf8: "replaceAll"
#263 = Utf8: "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;"
#264 = Utf8: "split"
#265 = Utf8: "(Ljava/lang/String;I)[Ljava/lang/String;"
#266 = Class: java/util/ArrayList
#267 = Utf8: "(Ljava/lang/String;)[Ljava/lang/String;"
#268 = Utf8: "join"
#269 = Utf8: "(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;"
#270 = Class: [Ljava/lang/CharSequence;
#271 = Class: java/util/StringJoiner
#272 = Utf8: "(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;"
#273 = Class: java/util/Iterator
#274 = Utf8: "(Ljava/lang/CharSequence;Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;)Ljava/lang/String;"
#275 = Utf8: "toLowerCase"
#276 = Utf8: "(Ljava/util/Locale;)Ljava/lang/String;"
#277 = Class: java/util/Locale
#278 = Utf8: "()Ljava/lang/String;"
#279 = Utf8: "toUpperCase"
#280 = Utf8: "trim"
#281 = Utf8: "toString"
#282 = Utf8: "toCharArray"
#283 = Utf8: "()[C"
#284 = Utf8: "format"
#285 = Utf8: "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;"
#286 = Utf8: "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;"
#287 = Utf8: "valueOf"
#288 = Utf8: "(Ljava/lang/Object;)Ljava/lang/String;"
#289 = Utf8: "([C)Ljava/lang/String;"
#290 = Utf8: "([CII)Ljava/lang/String;"
#291 = Utf8: "copyValueOf"
#292 = Utf8: "(Z)Ljava/lang/String;"
#293 = Utf8: "(C)Ljava/lang/String;"
#294 = Utf8: "(J)Ljava/lang/String;"
#295 = Utf8: "(F)Ljava/lang/String;"
#296 = Utf8: "(D)Ljava/lang/String;"
#297 = Utf8: "intern"
#298 = Utf8: "(Ljava/lang/Object;)I"
#299 = Utf8: "<clinit>"
#300 = Utf8: "Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ljava/lang/String;>;Ljava/lang/CharSequence;"
#301 = Utf8: "SourceFile"
#302 = Utf8: "String.java"
#303 = NameAndType: <init>:()V
#304 = Utf8: ""
#305 = NameAndType: value:[C
#306 = NameAndType: hash:I
#307 = Class: java/util/Arrays
#308 = NameAndType: copyOf:([CI)[C
#309 = Utf8: "java/lang/StringIndexOutOfBoundsException"
#310 = NameAndType: <init>:(I)V
#311 = NameAndType: copyOfRange:([CII)[C
#312 = NameAndType: isBmpCodePoint:(I)Z
#313 = NameAndType: isValidCodePoint:(I)Z
#314 = Utf8: "java/lang/IllegalArgumentException"
#315 = Class: java/lang/Integer
#316 = NameAndType: toString:(I)Ljava/lang/String;
#317 = NameAndType: <init>:(Ljava/lang/String;)V
#318 = NameAndType: toSurrogates:(I[CI)V
#319 = NameAndType: checkBounds:([BII)V
#320 = NameAndType: <init>:([BIII)V
#321 = Utf8: "java/lang/NullPointerException"
#322 = Utf8: "charsetName"
#323 = Class: java/lang/StringCoding
#324 = NameAndType: decode:(Ljava/lang/String;[BII)[C
#325 = Utf8: "charset"
#326 = NameAndType: decode:(Ljava/nio/charset/Charset;[BII)[C
#327 = NameAndType: <init>:([BIILjava/lang/String;)V
#328 = NameAndType: <init>:([BIILjava/nio/charset/Charset;)V
#329 = NameAndType: decode:([BII)[C
#330 = NameAndType: <init>:([BII)V
#331 = NameAndType: getValue:()[C
#332 = NameAndType: length:()I
#333 = Class: java/lang/StringBuilder
#334 = NameAndType: codePointAtImpl:([CII)I
#335 = NameAndType: codePointBeforeImpl:([CII)I
#336 = Utf8: "java/lang/IndexOutOfBoundsException"
#337 = NameAndType: codePointCountImpl:([CII)I
#338 = NameAndType: offsetByCodePointsImpl:([CIIII)I
#339 = Class: java/lang/System
#340 = NameAndType: arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
#341 = Class: java/util/Objects
#342 = NameAndType: requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
#343 = NameAndType: encode:(Ljava/lang/String;[CII)[B
#344 = NameAndType: encode:(Ljava/nio/charset/Charset;[CII)[B
#345 = NameAndType: encode:([CII)[B
#346 = Utf8: "java/lang/String"
#347 = NameAndType: contentEquals:(Ljava/lang/CharSequence;)Z
#348 = Utf8: "java/lang/AbstractStringBuilder"
#349 = Utf8: "java/lang/StringBuffer"
#350 = NameAndType: nonSyncContentEquals:(Ljava/lang/AbstractStringBuilder;)Z
#351 = NameAndType: equals:(Ljava/lang/Object;)Z
#352 = NameAndType: charAt:(I)C
#353 = NameAndType: regionMatches:(ZILjava/lang/String;II)Z
#354 = Class: java/lang/Math
#355 = NameAndType: min:(II)I
#356 = NameAndType: CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;
#357 = Class: java/util/Comparator
#358 = NameAndType: compare:(Ljava/lang/Object;Ljava/lang/Object;)I
#359 = NameAndType: toUpperCase:(C)C
#360 = NameAndType: toLowerCase:(C)C
#361 = NameAndType: startsWith:(Ljava/lang/String;I)Z
#362 = NameAndType: indexOf:(II)I
#363 = Utf8: "java/lang/Character"
#364 = NameAndType: indexOfSupplementary:(II)I
#365 = NameAndType: highSurrogate:(I)C
#366 = NameAndType: lowSurrogate:(I)C
#367 = NameAndType: lastIndexOf:(II)I
#368 = NameAndType: lastIndexOfSupplementary:(II)I
#369 = NameAndType: indexOf:(Ljava/lang/String;I)I
#370 = NameAndType: indexOf:([CII[CIII)I
#371 = NameAndType: lastIndexOf:(Ljava/lang/String;I)I
#372 = NameAndType: lastIndexOf:([CII[CIII)I
#373 = NameAndType: <init>:([CII)V
#374 = NameAndType: substring:(II)Ljava/lang/String;
#375 = NameAndType: getChars:([CI)V
#376 = NameAndType: <init>:([CZ)V
#377 = NameAndType: matches:(Ljava/lang/String;Ljava/lang/CharSequence;)Z
#378 = NameAndType: toString:()Ljava/lang/String;
#379 = NameAndType: indexOf:(Ljava/lang/String;)I
#380 = NameAndType: compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
#381 = NameAndType: matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
#382 = Class: java/util/regex/Matcher
#383 = NameAndType: replaceFirst:(Ljava/lang/String;)Ljava/lang/String;
#384 = NameAndType: replaceAll:(Ljava/lang/String;)Ljava/lang/String;
#385 = Utf8: "java/util/regex/Pattern"
#386 = NameAndType: compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;
#387 = NameAndType: quoteReplacement:(Ljava/lang/String;)Ljava/lang/String;
#388 = Utf8: ".$|()[{^?*+\\"
#389 = NameAndType: indexOf:(I)I
#390 = Utf8: "java/util/ArrayList"
#391 = NameAndType: size:()I
#392 = NameAndType: add:(Ljava/lang/Object;)Z
#393 = NameAndType: get:(I)Ljava/lang/Object;
#394 = NameAndType: subList:(II)Ljava/util/List;
#395 = Class: java/util/List
#396 = NameAndType: toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
#397 = Utf8: "[Ljava/lang/String;"
#398 = NameAndType: split:(Ljava/lang/CharSequence;I)[Ljava/lang/String;
#399 = NameAndType: split:(Ljava/lang/String;I)[Ljava/lang/String;
#400 = Utf8: "java/util/StringJoiner"
#401 = NameAndType: <init>:(Ljava/lang/CharSequence;)V
#402 = NameAndType: add:(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;
#403 = Class: java/lang/Iterable
#404 = NameAndType: iterator:()Ljava/util/Iterator;
#405 = Class: java/util/Iterator
#406 = NameAndType: hasNext:()Z
#407 = NameAndType: next:()Ljava/lang/Object;
#408 = Utf8: "java/lang/CharSequence"
#409 = NameAndType: codePointAt:(I)I
#410 = NameAndType: toLowerCase:(I)I
#411 = NameAndType: charCount:(I)I
#412 = Class: java/util/Locale
#413 = NameAndType: getLanguage:()Ljava/lang/String;
#414 = Utf8: "tr"
#415 = Utf8: "az"
#416 = Utf8: "lt"
#417 = Class: java/lang/ConditionalSpecialCasing
#418 = NameAndType: toLowerCaseEx:(Ljava/lang/String;ILjava/util/Locale;)I
#419 = NameAndType: toLowerCaseCharArray:(Ljava/lang/String;ILjava/util/Locale;)[C
#420 = NameAndType: toChars:(I[CI)I
#421 = NameAndType: toChars:(I)[C
#422 = NameAndType: getDefault:()Ljava/util/Locale;
#423 = NameAndType: toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
#424 = NameAndType: toUpperCaseEx:(I)I
#425 = NameAndType: toUpperCaseEx:(Ljava/lang/String;ILjava/util/Locale;)I
#426 = NameAndType: toUpperCaseCharArray:(Ljava/lang/String;ILjava/util/Locale;)[C
#427 = NameAndType: toUpperCaseCharArray:(I)[C
#428 = NameAndType: toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;
#429 = Utf8: "java/util/Formatter"
#430 = NameAndType: format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;
#431 = NameAndType: <init>:(Ljava/util/Locale;)V
#432 = Utf8: "null"
#433 = NameAndType: <init>:([C)V
#434 = Utf8: "true"
#435 = Utf8: "false"
#436 = Class: java/lang/Long
#437 = NameAndType: toString:(J)Ljava/lang/String;
#438 = Class: java/lang/Float
#439 = NameAndType: toString:(F)Ljava/lang/String;
#440 = Class: java/lang/Double
#441 = NameAndType: toString:(D)Ljava/lang/String;
#442 = NameAndType: compareTo:(Ljava/lang/String;)I
#443 = Utf8: "java/io/ObjectStreamField"
#444 = NameAndType: serialPersistentFields:[Ljava/io/ObjectStreamField;
#445 = Utf8: "java/lang/String$CaseInsensitiveComparator"
#446 = NameAndType: <init>:(Ljava/lang/String$1;)V
#447 = Utf8: "java/lang/Object"
#448 = Utf8: "java/io/Serializable"
#449 = Utf8: "java/lang/Comparable"
#450 = Utf8: "java/lang/String$1"
#451 = Utf8: "[I"
#452 = Utf8: "[B"
#453 = Utf8: "java/io/UnsupportedEncodingException"
#454 = Utf8: "java/nio/charset/Charset"
#455 = Utf8: "java/lang/Throwable"
#456 = Utf8: "[Ljava/lang/CharSequence;"
#457 = Utf8: "java/util/Iterator"
#458 = Utf8: "java/util/Locale"
#459 = Utf8: "java/util/Arrays"
#460 = Utf8: "copyOf"
#461 = Utf8: "([CI)[C"
#462 = Utf8: "(I)V"
#463 = Utf8: "copyOfRange"
#464 = Utf8: "([CII)[C"
#465 = Utf8: "isBmpCodePoint"
#466 = Utf8: "(I)Z"
#467 = Utf8: "isValidCodePoint"
#468 = Utf8: "java/lang/Integer"
#469 = Utf8: "toSurrogates"
#470 = Utf8: "(I[CI)V"
#471 = Utf8: "java/lang/StringCoding"
#472 = Utf8: "decode"
#473 = Utf8: "(Ljava/lang/String;[BII)[C"
#474 = Utf8: "(Ljava/nio/charset/Charset;[BII)[C"
#475 = Utf8: "([BII)[C"
#476 = Utf8: "getValue"
#477 = Utf8: "java/lang/StringBuilder"
#478 = Utf8: "codePointAtImpl"
#479 = Utf8: "([CII)I"
#480 = Utf8: "codePointBeforeImpl"
#481 = Utf8: "codePointCountImpl"
#482 = Utf8: "offsetByCodePointsImpl"
#483 = Utf8: "([CIIII)I"
#484 = Utf8: "java/lang/System"
#485 = Utf8: "arraycopy"
#486 = Utf8: "(Ljava/lang/Object;ILjava/lang/Object;II)V"
#487 = Utf8: "java/util/Objects"
#488 = Utf8: "requireNonNull"
#489 = Utf8: "(Ljava/lang/Object;)Ljava/lang/Object;"
#490 = Utf8: "encode"
#491 = Utf8: "(Ljava/lang/String;[CII)[B"
#492 = Utf8: "(Ljava/nio/charset/Charset;[CII)[B"
#493 = Utf8: "([CII)[B"
#494 = Utf8: "java/lang/Math"
#495 = Utf8: "min"
#496 = Utf8: "java/util/Comparator"
#497 = Utf8: "compare"
#498 = Utf8: "(Ljava/lang/Object;Ljava/lang/Object;)I"
#499 = Utf8: "(C)C"
#500 = Utf8: "highSurrogate"
#501 = Utf8: "lowSurrogate"
#502 = Utf8: "(Ljava/lang/String;Ljava/lang/CharSequence;)Z"
#503 = Utf8: "compile"
#504 = Utf8: "(Ljava/lang/String;)Ljava/util/regex/Pattern;"
#505 = Utf8: "matcher"
#506 = Utf8: "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;"
#507 = Utf8: "java/util/regex/Matcher"
#508 = Utf8: "(Ljava/lang/String;I)Ljava/util/regex/Pattern;"
#509 = Utf8: "quoteReplacement"
#510 = Utf8: "size"
#511 = Utf8: "add"
#512 = Utf8: "get"
#513 = Utf8: "(I)Ljava/lang/Object;"
#514 = Utf8: "subList"
#515 = Utf8: "(II)Ljava/util/List;"
#516 = Utf8: "java/util/List"
#517 = Utf8: "toArray"
#518 = Utf8: "([Ljava/lang/Object;)[Ljava/lang/Object;"
#519 = Utf8: "(Ljava/lang/CharSequence;I)[Ljava/lang/String;"
#520 = Utf8: "(Ljava/lang/CharSequence;)V"
#521 = Utf8: "(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;"
#522 = Utf8: "java/lang/Iterable"
#523 = Utf8: "iterator"
#524 = Utf8: "()Ljava/util/Iterator;"
#525 = Utf8: "hasNext"
#526 = Utf8: "next"
#527 = Utf8: "()Ljava/lang/Object;"
#528 = Utf8: "charCount"
#529 = Utf8: "getLanguage"
#530 = Utf8: "java/lang/ConditionalSpecialCasing"
#531 = Utf8: "toLowerCaseEx"
#532 = Utf8: "(Ljava/lang/String;ILjava/util/Locale;)I"
#533 = Utf8: "toLowerCaseCharArray"
#534 = Utf8: "(Ljava/lang/String;ILjava/util/Locale;)[C"
#535 = Utf8: "toChars"
#536 = Utf8: "(I[CI)I"
#537 = Utf8: "(I)[C"
#538 = Utf8: "getDefault"
#539 = Utf8: "()Ljava/util/Locale;"
#540 = Utf8: "toUpperCaseEx"
#541 = Utf8: "toUpperCaseCharArray"
#542 = Utf8: "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;"
#543 = Utf8: "(Ljava/util/Locale;)V"
#544 = Utf8: "java/lang/Long"
#545 = Utf8: "java/lang/Float"
#546 = Utf8: "java/lang/Double"
#547 = Utf8: "(Ljava/lang/String$1;)V"

interfaces:
java/io/Serializable
java/lang/Comparable
java/lang/CharSequence

fields:
value(0x12): [C
hash(0x2): I
serialVersionUID(0x1a): J
serialPersistentFields(0x1a): [Ljava/io/ObjectStreamField;
CASE_INSENSITIVE_ORDER(0x19): Ljava/util/Comparator;

methods:
<init>(0x1): ()V
<init>(0x1): (Ljava/lang/String;)V
<init>(0x1): ([C)V
<init>(0x1): ([CII)V
<init>(0x1): ([III)V
<init>(0x1): ([BIII)V
<init>(0x1): ([BI)V
checkBounds(0xa): ([BII)V
<init>(0x1): ([BIILjava/lang/String;)V
<init>(0x1): ([BIILjava/nio/charset/Charset;)V
<init>(0x1): ([BLjava/lang/String;)V
<init>(0x1): ([BLjava/nio/charset/Charset;)V
<init>(0x1): ([BII)V
<init>(0x1): ([B)V
<init>(0x1): (Ljava/lang/StringBuffer;)V
<init>(0x1): (Ljava/lang/StringBuilder;)V
<init>(0x0): ([CZ)V
length(0x1): ()I
isEmpty(0x1): ()Z
charAt(0x1): (I)C
codePointAt(0x1): (I)I
codePointBefore(0x1): (I)I
codePointCount(0x1): (II)I
offsetByCodePoints(0x1): (II)I
getChars(0x0): ([CI)V
getChars(0x1): (II[CI)V
getBytes(0x1): (II[BI)V
getBytes(0x1): (Ljava/lang/String;)[B
getBytes(0x1): (Ljava/nio/charset/Charset;)[B
getBytes(0x1): ()[B
equals(0x1): (Ljava/lang/Object;)Z
contentEquals(0x1): (Ljava/lang/StringBuffer;)Z
nonSyncContentEquals(0x2): (Ljava/lang/AbstractStringBuilder;)Z
contentEquals(0x1): (Ljava/lang/CharSequence;)Z
equalsIgnoreCase(0x1): (Ljava/lang/String;)Z
compareTo(0x1): (Ljava/lang/String;)I
compareToIgnoreCase(0x1): (Ljava/lang/String;)I
regionMatches(0x1): (ILjava/lang/String;II)Z
regionMatches(0x1): (ZILjava/lang/String;II)Z
startsWith(0x1): (Ljava/lang/String;I)Z
startsWith(0x1): (Ljava/lang/String;)Z
endsWith(0x1): (Ljava/lang/String;)Z
hashCode(0x1): ()I
indexOf(0x1): (I)I
indexOf(0x1): (II)I
indexOfSupplementary(0x2): (II)I
lastIndexOf(0x1): (I)I
lastIndexOf(0x1): (II)I
lastIndexOfSupplementary(0x2): (II)I
indexOf(0x1): (Ljava/lang/String;)I
indexOf(0x1): (Ljava/lang/String;I)I
indexOf(0x8): ([CIILjava/lang/String;I)I
indexOf(0x8): ([CII[CIII)I
lastIndexOf(0x1): (Ljava/lang/String;)I
lastIndexOf(0x1): (Ljava/lang/String;I)I
lastIndexOf(0x8): ([CIILjava/lang/String;I)I
lastIndexOf(0x8): ([CII[CIII)I
substring(0x1): (I)Ljava/lang/String;
substring(0x1): (II)Ljava/lang/String;
subSequence(0x1): (II)Ljava/lang/CharSequence;
concat(0x1): (Ljava/lang/String;)Ljava/lang/String;
replace(0x1): (CC)Ljava/lang/String;
matches(0x1): (Ljava/lang/String;)Z
contains(0x1): (Ljava/lang/CharSequence;)Z
replaceFirst(0x1): (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
replaceAll(0x1): (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
replace(0x1): (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
split(0x1): (Ljava/lang/String;I)[Ljava/lang/String;
split(0x1): (Ljava/lang/String;)[Ljava/lang/String;
join(0x89): (Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;
join(0x9): (Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;
toLowerCase(0x1): (Ljava/util/Locale;)Ljava/lang/String;
toLowerCase(0x1): ()Ljava/lang/String;
toUpperCase(0x1): (Ljava/util/Locale;)Ljava/lang/String;
toUpperCase(0x1): ()Ljava/lang/String;
trim(0x1): ()Ljava/lang/String;
toString(0x1): ()Ljava/lang/String;
toCharArray(0x1): ()[C
format(0x89): (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
format(0x89): (Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
valueOf(0x9): (Ljava/lang/Object;)Ljava/lang/String;
valueOf(0x9): ([C)Ljava/lang/String;
valueOf(0x9): ([CII)Ljava/lang/String;
copyValueOf(0x9): ([CII)Ljava/lang/String;
copyValueOf(0x9): ([C)Ljava/lang/String;
valueOf(0x9): (Z)Ljava/lang/String;
valueOf(0x9): (C)Ljava/lang/String;
valueOf(0x9): (I)Ljava/lang/String;
valueOf(0x9): (J)Ljava/lang/String;
valueOf(0x9): (F)Ljava/lang/String;
valueOf(0x9): (D)Ljava/lang/String;
intern(0x101): ()Ljava/lang/String;
compareTo(0x1041): (Ljava/lang/Object;)I
<clinit>(0x8): ()V
